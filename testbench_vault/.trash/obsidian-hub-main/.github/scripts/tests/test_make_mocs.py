# Run tests with:
#   ./run_tests.py
import os

# -------------------------------------------------------------------------------------------------------------
# For how to use and maintain these tests, please see:
#       https://publish.obsidian.md/hub/00+-+Contribute+to+the+Obsidian+Hub/03+Contributor+Notes/03.03+Scripts+and+Automation/Testing+Python+Code+with+Approval+Tests
# -------------------------------------------------------------------------------------------------------------
from typing import List

from helpers_for_testing import verify_as_markdown

import make_mocs


# -------------------------------------------------------------------------------------------------------------
# Helper Functions
# -------------------------------------------------------------------------------------------------------------

def verify_moc_for_directory_with_delimiters(directory: str, sub_directories: List[str], files: List[str]) -> None:
    """
    Generate the MOC output for given directory and its contents, and save it disk,
    verifying that the output is unchanged since the previous approved output,
    by calling the ApprovalTests method verify()

    For more info, see https://publish.obsidian.md/hub/00+-+Contribute+to+the+Obsidian+Hub/03+Contributor+Notes/03.03+Scripts+and+Automation/Testing+Python+Code+with+Approval+Tests

    :param directory: name of the directory, such as '../..', 'Directory 1' or 'Directory 1/Sub-directory'
    :param sub_directories: List of names of sub-directories in the given directory
    :param files: List of names of files in the given directory
    :return: None
    """
    moc_maker = make_mocs.MocMaker()
    result = moc_maker.make_moc_for_directory_with_delimiters(directory, sub_directories, files)
    verify_as_markdown(result)


def verify_updating_existing_moc(existing_moc_file_name: str) -> None:
    """
    Read an existing MOC file (which must be in scripts/tests/) and update the
    contents, saving the output to a new file on disk, verifying that the output
    is unchanged since the previous approved output, by calling the ApprovalTests method verify()

    The supplied moc file is not modified.

    :param existing_moc_file_name: name of an existing MOC file (which must be in scripts/tests/)
    :return: None
    """
    input_dir = os.path.dirname(os.path.abspath(__file__))
    input_file = os.path.join(input_dir, existing_moc_file_name)
    with open(input_file) as input:
        initial_content = input.readlines()

    directories = [
        'dir 1',
        'Dir 2',
    ]
    files = [
        'File 1.md',
        'File 2.md',
    ]
    moc_maker = make_mocs.MocMaker()
    new_moc_content_with_delimiters = moc_maker.make_moc_for_directory_with_delimiters('test', directories, files)

    result = moc_maker.update_existing_moc(initial_content, new_moc_content_with_delimiters)
    verify_as_markdown(result)


# -------------------------------------------------------------------------------------------------------------
# MocFileNamer tests
# -------------------------------------------------------------------------------------------------------------


def test_moc_name_for_directory() -> None:
    namer = make_mocs.MocFileNamer()

    # Test that the prefix is correctly added to a directory name:
    assert namer.moc_name_for_sub_directory('Events') == '🗂️ Events'

    # Test that the top-level directory gets a special-case name of "hub":
    assert namer.moc_name_for_sub_directory('..') == '🗂️ hub'


# -------------------------------------------------------------------------------------------------------------
# MocDelimiter tests
# -------------------------------------------------------------------------------------------------------------


def test_delimiter_detection() -> None:
    # Note the presence of the end-of-line marker in the test strings below
    
    # Initial delimiters
    line = '%% Zoottelkeeper: Beginning of the autogenerated index file list  %%\n'
    assert True == make_mocs.MocDelimiter.whole_line_is_initial_delimiter(line)

    line = '%% Hub MOCs: Don’t edit below  %%\n'
    assert True == make_mocs.MocDelimiter.whole_line_is_initial_delimiter(line)

    assert False == make_mocs.MocDelimiter.whole_line_is_initial_delimiter("some random line")

    # Final delimiters
    line = '%% Zoottelkeeper: End of the autogenerated index file list  %%\n'
    assert True == make_mocs.MocDelimiter.whole_line_is_final_delimiter(line)

    line = '%% Hub MOCs: Don’t edit above  %%\n'
    assert True == make_mocs.MocDelimiter.whole_line_is_final_delimiter(line)

    assert False == make_mocs.MocDelimiter.whole_line_is_final_delimiter("some random line")


# -------------------------------------------------------------------------------------------------------------
# MocMaker tests
# -------------------------------------------------------------------------------------------------------------


def test_moc_for_empty_directory() -> None:
    # This tests that a blank line is inserted between the delimiters,
    # if the directory is empty.
    verify_moc_for_directory_with_delimiters('../..', [], [])


def test_moc_for_root_directory() -> None:
    directory = '../..'
    directories = [
        # Directories that should not be included
        '.this_hidden_directory_should_not_be_included_in_file_list',

        # Check the directory names are sorted
        '02 - This directory should be listed after directory 01 ...',
        '01 - This directory should be listed before directory 02...',

        # Python virtual environment directory should also not be included
        '03 - There should not be a directory called "venv" in the output',
        'venv',
        '04 - There should not be a directory called "DO NOT COMMIT" in the output',
        'DO NOT COMMIT',
    ]
    files = [
        # Files that should not be included
        '.this_hidden_file_should_not_be_included_in_file_list',

        # Check the file names are sorted
        '01 - all files should be listed after all folders',
        '03 - This file should be listed after file 02 ...',
        '02 - This file should be listed before file 03...',
        'ZZ - This file should be listed after file YY ...',
        'YY - This file should be listed before file ZZ...',

        # Confirm whether some non .md files are included
        'svg-files-are-currently-included.svg',
        'css-files-are-currently-included.css',

        # Add messages that should explain test failure, if unwanted files ever get added back to the moc:
        'logo.svg should-not-be-included.md',
        'publish.css should-not-be-included.md',
        # And that two specific top-level non .md files are currently excluded
        'logo.svg',
        'publish.css',

        '00 - there should not be a link to a file called 🗂️ hub',
        '🗂️ hub.md',
    ]

    verify_moc_for_directory_with_delimiters(directory, directories, files)


def test_updating_moc_with_zoottelkeeper_delimiters() -> None:
    verify_updating_existing_moc('sample-existing-moc-1.md')


def test_updating_moc_with_hub_delimiters() -> None:
    verify_updating_existing_moc('sample-existing-moc-2.md')
